# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Admin {
  organization: Organization!
}

type Mutation {
  addTeam(teamId: String!, tournamentId: String!): Tournament!
  createOrganization(name: String!): Organization!
  createTournament(name: String!, organizationId: String!): Tournament!
  removeTeam(teamId: String!, tournamentId: String!): Tournament!
  updateSelf(user: UpdateUserInput!): SimpleUser!
}

type Organization implements SimpleOrganization {
  id: ID!
  orgName: String!
  tournaments: [Tournament!]!
}

type Query {
  me: User
  organization(id: String!): Organization!
  searchForUser(params: SearchUserInput!): [SimpleUser!]!
  tournament(id: String!): Tournament!
  user(discordId: String, id: String): User
}

input SearchUserInput {
  """Maximum number of returned results"""
  limit: Int = 10

  """Offset * limit. Page of your results"""
  page: Int = 0

  """Partial username to search for"""
  username: String!
}

interface SimpleOrganization {
  id: ID!
  orgName: String!
}

interface SimpleTeam {
  id: ID!
  name: String!
}

interface SimpleUser {
  id: ID!
  username: String!
}

type Team implements SimpleTeam {
  id: ID!
  members: [TeamMember!]!
  name: String!
  tournaments: [Tournament!]!
}

type TeamMember {
  active: Boolean!
  role: TeamMemberRole!
  team: Team!
  user: User!
}

enum TeamMemberRole {
  ASSISTANT_COACH
  HEAD_COACH
  PLAYER
  SUBSTITUTE
}

type Tournament {
  active: Boolean!
  dateEnd: String
  dateStart: String!
  id: ID!
  organization: Organization!
  teams: [Team!]!
  tournamentName: String!
}

input UpdateUserInput {
  username: String
}

type User implements SimpleUser {
  admin: Admin
  id: ID!
  memberships: [TeamMember!]!
  username: String!
}
